1. Explain what is event loop and how it works.
2. What are callbacks

Answer : Callback is an asynchronous equivalent for a function.
 A callback function is called at the completion of a given task.

 For example, a function to read a file may start reading file and return the control to the execution environment
 immediately so that the next instruction can be executed.Once file I/O is complete, it will call the callback
 function while passing the callback function, the content of the file as a parameter.
 So there is no blocking or wait for File I/O. This makes Node.js highly scalable, as it can process a high number
 of requests without waiting for any function to return results.

3. What are promises?

Answer : A promise is just an enhancement to callback functions in Node.js.
During the development lifecycle, there may be an instance where you would need
to nest multiple callback functions together.
This can get kind of messy and difficult to maintain at a certain point in time.
In short, a promise is an enhancement to callbacks that looks towards alleviating these problems.


4. What is the difference between callback and promises?
5. Is Node.js Single-threaded? If yes, then how it manages multi tasking?

Answer : Yes, Node.js is single threadad. Node.js has event loop which manages
  multi-tasking.

6. Why use Node.js or What are the advantages of Node.js?

Answer :
  1. Asynchronous I/O
  2. Highly scalable
  3. Lightweight.

7. What is callback hell? How do you prevent it?

8. Difference between process.nextTick() and setImmediate() Methods

Answer : Understanding process.nextTick() method: Whenever a new queue of operations is initialized we can think of it 
as a new tick. The process.nextTick() method adds the callback function to the start of the next event queue. It is to
be noted that, at the start of the program process.nextTick() method is called for the first time before the event loop is processed.

Understanding setImmdeiate() method: Whenever we call setImmediate() method, it’s callback function is placed in the 
check phase of the next event queue. There is slight detail to be noted here that setImmediate() method is called in 
the poll phase and it’s callback functions are invoked in the check phase.
